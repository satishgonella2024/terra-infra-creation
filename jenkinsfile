pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
    }

    parameters {
        choice(
            name: 'ACTION',
            choices: ['create', 'destroy'],
            description: 'Choose whether to create or destroy the infrastructure.'
        )
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'git@github.com:satishgonella2024/terra-infra-creation.git'
            }
        }

        stage('Setup SSH Key') {
            steps {
                sh '''
                if [ -f /var/lib/jenkins/.ssh/wordpress-key ]; then
                    echo "Key already exists, skipping generation."
                else
                    ssh-keygen -t rsa -b 2048 -f /var/lib/jenkins/.ssh/wordpress-key -N ""
                fi
                '''
            }
        }

        stage('Initialize Terraform') {
            steps {
                sh '''
                terraform init \
                    -backend-config="bucket=terraform-state-bucket-eg" \
                    -backend-config="key=terra-wordpress/terraform.tfstate" \
                    -backend-config="region=eu-west-2"
                '''
            }
        }

        stage('Validate Terraform') {
            steps {
                sh 'terraform validate'
            }
        }

        stage('Plan Infrastructure') {
            steps {
                script {
                    def planOutput = sh(
                        script: 'terraform plan -var-file=environments/dev/terraform.tfvars',
                        returnStatus: true
                    )
                    if (planOutput != 0) {
                        error("Terraform Plan failed. Check logs.")
                    }
                }
            }
        }

        stage('Terraform Action') {
            steps {
                script {
                    if (params.ACTION == 'create') {
                        sh 'terraform apply -var-file=environments/dev/terraform.tfvars -auto-approve'
                    } else if (params.ACTION == 'destroy') {
                        sh 'terraform destroy -var-file=environments/dev/terraform.tfvars -auto-approve'
                    }
                }
            }
        }

        stage('Capture Outputs') {
            when {
                expression { params.ACTION == 'create' }
            }
            steps {
                script {
                    def output = sh(
                        script: 'terraform output -json',
                        returnStdout: true
                    ).trim()
                    writeFile file: 'infra-output.json', text: output
                    archiveArtifacts artifacts: 'infra-output.json'
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/terraform.tfstate', fingerprint: true
        }
        success {
            echo 'Infrastructure deployment successful. Ready for application deployment.'
        }
        failure {
            echo 'Infrastructure deployment failed.'
        }
    }
}
