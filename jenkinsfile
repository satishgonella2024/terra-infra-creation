pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-credentials') // Replace with your Jenkins AWS credentials ID
        AWS_SECRET_ACCESS_KEY = credentials('aws-credentials')
    }

    parameters {
        choice(
            name: 'ACTION',
            choices: ['create', 'destroy'],
            description: 'Choose whether to create or destroy the infrastructure.'
        )
        booleanParam(name: 'CREATE_KEY', defaultValue: true, description: 'Create SSH key pair')
    }


    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'main', url: 'git@github.com:satishgonella2024/terra-infra-creation.git'
            }
        }

        stage('Initialize Terraform') {
            steps {
                sh '''
                terraform init \
                    -backend-config="bucket=terraform-state-bucket-eg" \
                    -backend-config="key=terra-wordpress/terraform.tfstate" \
                    -backend-config="region=eu-west-2"
                '''
            }
        }

        stage('Validate Terraform') {
            steps {
                sh 'terraform validate'
            }
        }

        stage('Plan Infrastructure') {
            steps {
                sh 'terraform plan -var-file=environments/dev/terraform.tfvars'
            }
        }

        stage('Terraform Action') {
            steps {
                script {
                    if (params.ACTION == 'create') {
                        sh 'terraform apply -var-file=environments/dev/terraform.tfvars -auto-approve'
                    } else if (params.ACTION == 'destroy') {
                        sh 'terraform destroy -var-file=environments/dev/terraform.tfvars -auto-approve'
                    }
                }
            }
        }

        stage('Capture Outputs') {
            when {
                expression { params.ACTION == 'create' }
            }
            steps {
                script {
                    def output = sh(
                        script: 'terraform output -json',
                        returnStdout: true
                    ).trim()
                    writeFile file: 'infra-output.json', text: output
                    archiveArtifacts artifacts: 'infra-output.json'
                }
            }
        }
    }
    }
post {
    always {
        archiveArtifacts artifacts: '**/terraform.tfstate', fingerprint: true
        // writeFile file: 'infra-output.json', text: '''
        // {
        //   "app_dns": "your-alb-dns.amazonaws.com",
        //   "app_port": "80"
        // }
        // '''
        // archiveArtifacts artifacts: 'infra-output.json'
    }
    success {
        echo 'Infrastructure deployment successful. Ready for application deployment.'
    }
    failure {
        echo 'Infrastructure deployment failed.'
    }
}

 
}